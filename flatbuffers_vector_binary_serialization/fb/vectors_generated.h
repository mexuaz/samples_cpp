// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_VECTORS_VECTORS_H_
#define FLATBUFFERS_GENERATED_VECTORS_VECTORS_H_

#include "flatbuffers/flatbuffers.h"

namespace vectors {

struct FlbData;
struct FlbDataBuilder;

struct FlbData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FlbDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VEC1 = 4,
    VT_VEC2 = 6
  };
  const flatbuffers::Vector<uint64_t> *Vec1() const {
    return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_VEC1);
  }
  const flatbuffers::Vector<uint64_t> *Vec2() const {
    return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_VEC2);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VEC1) &&
           verifier.VerifyVector(Vec1()) &&
           VerifyOffset(verifier, VT_VEC2) &&
           verifier.VerifyVector(Vec2()) &&
           verifier.EndTable();
  }
};

struct FlbDataBuilder {
  typedef FlbData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Vec1(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> Vec1) {
    fbb_.AddOffset(FlbData::VT_VEC1, Vec1);
  }
  void add_Vec2(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> Vec2) {
    fbb_.AddOffset(FlbData::VT_VEC2, Vec2);
  }
  explicit FlbDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FlbDataBuilder &operator=(const FlbDataBuilder &);
  flatbuffers::Offset<FlbData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FlbData>(end);
    return o;
  }
};

inline flatbuffers::Offset<FlbData> CreateFlbData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> Vec1 = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> Vec2 = 0) {
  FlbDataBuilder builder_(_fbb);
  builder_.add_Vec2(Vec2);
  builder_.add_Vec1(Vec1);
  return builder_.Finish();
}

inline flatbuffers::Offset<FlbData> CreateFlbDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint64_t> *Vec1 = nullptr,
    const std::vector<uint64_t> *Vec2 = nullptr) {
  auto Vec1__ = Vec1 ? _fbb.CreateVector<uint64_t>(*Vec1) : 0;
  auto Vec2__ = Vec2 ? _fbb.CreateVector<uint64_t>(*Vec2) : 0;
  return vectors::CreateFlbData(
      _fbb,
      Vec1__,
      Vec2__);
}

inline const vectors::FlbData *GetFlbData(const void *buf) {
  return flatbuffers::GetRoot<vectors::FlbData>(buf);
}

inline const vectors::FlbData *GetSizePrefixedFlbData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<vectors::FlbData>(buf);
}

inline bool VerifyFlbDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<vectors::FlbData>(nullptr);
}

inline bool VerifySizePrefixedFlbDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<vectors::FlbData>(nullptr);
}

inline void FinishFlbDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<vectors::FlbData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFlbDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<vectors::FlbData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace vectors

#endif  // FLATBUFFERS_GENERATED_VECTORS_VECTORS_H_
